AWSTemplateFormatVersion: 2010-09-09
Description: >-
  The Better Store Order API

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod

  InfraBaseCFName:
    Type: String

  SecKmsKeysCFName:
    Type: String
    Default: tbs-sec-kms-prod

  PersistErrorReservedConcurrency:
    Type: String
    Default: 1

  AppLoggingLevel:
    Type: String
    AllowedValues: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
    Default: INFO

  SystemLogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARN]
    Default: INFO

  TbsAppReportsCFStackName:
    Type: String
    Default: tbs-app-reports-prod

Resources:

  DlqErrorTable:
    Type: AWS::DynamoDB::Table
    #    DeletionPolicy: Retain
    #    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "messageId"
          AttributeType: "S"
        - AttributeName: "dlqName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "messageId"
          KeyType: "HASH"
        - AttributeName: "dlqName"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      #      ProvisionedThroughput:
      #        ReadCapacityUnits: 1
      #        WriteCapacityUnits: 1
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - Fn::ImportValue: !Sub ${TbsAppReportsCFStackName}:UserOrderUpsertedEventDLQ:Arn
              - Effect: Allow
                Action:
                  - "dynamodb:Put*"
                Resource:
                  - !GetAtt DlqErrorTable.Arn
              - Effect: Allow
                Action: kms:Decrypt
                Resource:
                  Fn::ImportValue: !Sub ${SecKmsKeysCFName}:InternalKmsKey:Arn


  PersistDlqErrorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: index.handler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 10
      Description: Persist error details from DLQs to DynamoDB
      Tracing: Active
      ReservedConcurrentExecutions: !Sub ${PersistErrorReservedConcurrency}
      LoggingConfig:
        LogGroup: !Ref PersistDlqErrorFunctionLogs
        LogFormat: JSON
        ApplicationLogLevel: !Ref AppLoggingLevel
        SystemLogLevel: !Ref SystemLogLevel
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DLQ_ERROR_TABLE_NAME: !Ref DlqErrorTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/application/event-handlers/receive-lambdadlq-errors/index.ts

  PersistDlqErrorFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-PersistDlqErrorFunction"
      RetentionInDays: 30

  # This list is expected to grow - how to make this dynamic for scale?
  ReportsFunctionDlqEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn:
        Fn::ImportValue: !Sub ${TbsAppReportsCFStackName}:UserOrderUpsertedEventDLQ:Arn
      FunctionName: !Ref PersistDlqErrorFunction

Outputs:

  DlqErrorTableName:
    Description: Ddb Error table Name
    Value: !Ref DlqErrorTable
    Export:
      Name: !Sub '${AWS::StackName}:DlqErrorTable:Name'

  DlqErrorTableArn:
    Description: Ddb Error table Arn
    Value: !GetAtt DlqErrorTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}:DlqErrorTable:Arn'